document.addEventListener("DOMContentLoaded", function () {
    const citySelect = document.getElementById("city-select");
    const weatherDataElement = document.getElementById("weather-data");
    const loader = document.getElementById("loader");
    const showWeatherBtn = document.getElementById("show-weather-btn");

    async function fetchWeather(latitude, longitude) {
        try {
            const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current_weather=true`);

            if (!response.ok) {
                throw new Error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: " + response.status);
            }

            const data = await response.json();

            const temperature = data.current_weather.temperature;
            const windspeed = data.current_weather.windspeed;
            const weathercode = data.current_weather.weathercode;

            return {
                temperature: temperature,
                windspeed: windspeed,
                weathercode: weathercode
            };
        } catch (error) {
            console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
            return {};
        }
    }
    async function fetchData() {
        try {
            const response = await fetch("/cities/cities.json");
            if (!response.ok) {
                throw new Error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: " + response.status);
            }

            const data = await response.json();
            console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data);
            return data;
        } catch (error) {
            console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
            return [];
        }
    }

    function decodeWeatherCode(weathercode) {
        switch (weathercode) {
            case 0:
                return "–Ø—Å–Ω–æ–µ –Ω–µ–±–æ ‚òÄÔ∏è";
            case (1, 2, 3):
                return "–í –æ—Å–Ω–æ–≤–Ω–æ–º —è—Å–Ω–æ, —á–∞—Å—Ç–∏—á–Ω–æ –æ–±–ª–∞—á–Ω–æ –∏ –ø–∞—Å–º—É—Ä–Ω–æ üå•Ô∏è";
            case (45, 48):
                return "–¢—É–º–∞–Ω –∏ –∏–Ω–µ—é—â–∏–π —Ç—É–º–∞–Ω üå´Ô∏è";
            case (51, 53, 55):
                return "–ú–æ—Ä–æ—Å—å: —Å–ª–∞–±–∞—è, —É–º–µ—Ä–µ–Ω–Ω–∞—è –∏ —Å–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å üå¶Ô∏è";
            case (56, 57):
                return "–ó–∞–º–µ—Ä–∑–∞—é—â–∞—è –º–æ—Ä–æ—Å—å: —Å–ª–∞–±–∞—è –∏ —Å–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å";
            case (61, 63, 65):
                return "–î–æ–∂–¥—å: –ª–µ–≥–∫–∞—è, —É–º–µ—Ä–µ–Ω–Ω–∞—è –∏ —Å–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å üåßÔ∏è";
            case (66, 67):
                return "–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å: –ª–µ–≥–∫–∞—è –∏ —Å–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å üåßÔ∏è";
            case (71, 73, 75):
                return "–°–Ω–µ–≥–æ–ø–∞–¥: –ª–µ–≥–∫–∞—è, —É–º–µ—Ä–µ–Ω–Ω–∞—è –∏ —Å–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å üå®Ô∏è";
            case 77:
                return "–°–Ω–µ–∂–∏–Ω–∫–∏ ‚ùÑÔ∏è";
            case (80, 81, 82):
                return "–õ–∏–≤–µ–Ω—å: —Å–ª–∞–±—ã–π, —É–º–µ—Ä–µ–Ω–Ω—ã–π –∏ —Å–∏–ª—å–Ω—ã–π ‚òî";
            case (85, 86):
                return "–°–Ω–µ–≥–æ–ø–∞–¥: —Å–ª–∞–±—ã–π –∏ —Å–∏–ª—å–Ω—ã–π";
            case 95:
                return "–ì—Ä–æ–∑–∞: —Å–ª–∞–±–∞—è –∏–ª–∏ —É–º–µ—Ä–µ–Ω–Ω–∞—è ‚õàÔ∏è";
            case (96, 99):
                return "–ì—Ä–æ–∑–∞ —Å –º–µ–ª–∫–∏–º –∏ –∫—Ä—É–ø–Ω—ã–º –≥—Ä–∞–¥–æ–º ‚õàÔ∏è";
            default:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥ –ø–æ–≥–æ–¥—ã";
        }
    }

    async function showWeather() {
        const selectedCityName = citySelect.value;
        if (!selectedCityName) {
            weatherDataElement.innerHTML = "<p>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥</p>";
            return;
        }

        const cities = await fetchData();
        const selectedCity = cities.find(city => city.city === selectedCityName);
        if (selectedCity) {
            renderWeatherCard(selectedCity);
        } else {
            weatherDataElement.innerHTML = "<p>–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</p>";
        }
    }


    showWeatherBtn.addEventListener("click", showWeather);


    async function renderWeatherCard(cityData) {
        console.log("–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞:", cityData);
        const loader = document.getElementById("loader");
        loader.style.display = "block";

        try {
            const weatherData = await fetchWeather(cityData.latitude, cityData.longitude);
            const city = cityData.city;
            const temperature = weatherData.temperature;
            const windspeed = weatherData.windspeed;
            const weathercode = weatherData.weathercode;
            const weatherDescription = decodeWeatherCode(weathercode);

            setTimeout(() => {
                loader.style.display = "none";
                weatherDataElement.style.display = "flex";
                weatherDataElement.innerHTML = `<h2 class="city">${city}</h2>`;
                if (temperature !== undefined) {
                    weatherDataElement.innerHTML += `<p class="temperature">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temperature} ¬∞C</p>`;
                }
                if (windspeed !== undefined) {
                    weatherDataElement.innerHTML += `<p class="windspeed">–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: ${windspeed} –∫–º/—á</p>`;
                }
                if (weatherDescription !== undefined) {
                    weatherDataElement.innerHTML += `<p class="weather-description">–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã: </p>`;
                    weatherDataElement.innerHTML += `<p class="weather-description">${weatherDescription}</p>`;
                }
            }, 150);
        } catch (error) {
            console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
            loader.style.display = "none";
        }
    }

    async function populateCitySelect() {
        const cities = await fetchData();
        for (const city of cities) {
            const option = document.createElement("option");
            option.value = city.city;
            option.textContent = city.city;
            citySelect.appendChild(option);
        }
    }

    populateCitySelect();
});